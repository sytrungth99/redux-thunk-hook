{"version":3,"sources":["logo.svg","App.js","redux/actions/postAction.js","redux/constants/postConstant.js","serviceWorker.js","redux/reducers/postReducer.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","App","data","useSelector","huhu","posts","request","state","dispatch","useDispatch","useEffect","a","type","fetch","response","json","responseBody","console","error","message","className","src","logo","alt","length","map","item","key","id","name","Boolean","window","location","hostname","match","initState","success","postReducer","payload","reducer","combineReducers","middleware","thunk","store","createStore","states","action","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,uNCkC5BC,MA5Bf,WACE,IAAMC,EAAOC,aAAY,SAAAC,GAAI,OAAIA,EAAKC,MAAMH,QACtCI,EAAUH,aAAY,SAAAI,GAAK,OAAIA,EAAMF,MAAMC,WAC3CE,EAAWC,cAIjB,OAHAC,qBAAU,WACRF,ECLqB,uCAAM,WAAMA,GAAN,iBAAAG,EAAA,sEAEvBH,EAAS,CAAEI,KCRgB,wBDMJ,SAKAC,MADX,kDAJW,cAKjBC,EALiB,gBAMIA,EAASC,OANb,OAMjBC,EANiB,OAOvBR,EAAS,CACLI,KCbuB,sBDcvBV,KAAMc,IATa,kDAYvBC,QAAQC,MAAR,MACAV,EAAS,CACLI,KClBqB,oBDmBrBO,QAAQ,EAAD,KAfY,0DAAN,yDDMrB,CAACX,IAED,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAEdd,EACE,yBAAKe,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAExCrB,GAAQA,EAAKsB,OAAS,EAAK,6BAC1B,wBAAIJ,UAAU,cACXlB,EAAKuB,KAAI,SAAAC,GAAI,OACZ,wBAAIC,IAAKD,EAAKE,GAAIR,UAAU,mBAAmBM,EAAKG,WAItD,iDGfIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCbAC,EAAW,CACb7B,SAAQ,EACR8B,SAAQ,EACRjB,QAAQ,KACRjB,KAAK,MA6BMmC,MA3Bf,WAA8C,IAAzB9B,EAAwB,uDAAlB4B,EAAUG,EAAQ,uCACzC,OAAOA,EAAQ1B,MACX,IFb2B,sBEcvB,OAAO,2BACAL,GADP,IAEID,SAAQ,IAGhB,IFlB2B,sBEmBvB,OAAO,2BACAC,GADP,IAEID,SAAQ,EACR8B,SAAQ,EACRlC,KAAKoC,EAAQpC,OAErB,IFxByB,oBEyBrB,OAAO,2BACAK,GADP,IAEID,SAAQ,EACR8B,SAAQ,EACRjB,QAAQmB,EAAQnB,UAExB,QACI,OAAOZ,IC/BbgC,EAAUC,YAAgB,CAC7BnC,MAAOgC,ICGJI,EAAY,CAACC,KAIZ,IAAMC,EAAQC,aDLN,SAACC,EAAOC,GAAR,OAAmBP,EAAQM,EAAOC,KCO7CC,IAAe,WAAf,EAAmBN,ICLvBO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAQA,GAChB,kBAAC,EAAD,QAGJQ,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.b82c291d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadPosts } from './redux/actions/postAction';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const data = useSelector(huhu => huhu.posts.data);\n  const request = useSelector(state => state.posts.request);\n  const dispatch = useDispatch();\n  useEffect(() =>{\n    dispatch(loadPosts());\n  },[dispatch]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {\n          request ?\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            :\n            (data && data.length > 0) ? <div>\n              <ul className=\"list-group\">\n                {data.map(item =>\n                  <li key={item.id} className=\"list-group-item\">{item.name}</li>\n                )}\n              </ul>\n            </div>\n              : <div>Data is empty</div>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n    FETCH_POSTS_ERROR,\r\n    FETCH_POSTS_REQUEST,\r\n    FETCH_POSTS_SUCCESS\r\n} from '../constants/postConstant';\r\n\r\nexport const loadPosts = () => async dispatch => {\r\n    try {\r\n        dispatch({ type: FETCH_POSTS_REQUEST });\r\n\r\n        const url = \"https://js-post-api.herokuapp.com/api/products\";\r\n        const response = await fetch(url);\r\n        const responseBody = await response.json();\r\n        dispatch({\r\n            type: FETCH_POSTS_SUCCESS,\r\n            data: responseBody\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: FETCH_POSTS_ERROR,\r\n            message: error\r\n        });\r\n    }\r\n}","export const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_ERROR = 'FETCH_POSTS_ERROR';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    FETCH_POSTS_ERROR,\r\n    FETCH_POSTS_REQUEST,\r\n    FETCH_POSTS_SUCCESS,\r\n} from '../constants/postConstant';\r\nconst initState ={\r\n    request:false,\r\n    success:false,\r\n    message:null,\r\n    data:null,\r\n}\r\nfunction postReducer(state=initState,payload){\r\n    switch(payload.type){\r\n        case FETCH_POSTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                request:true,\r\n\r\n            };\r\n        case FETCH_POSTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                request:false,\r\n                success:true,\r\n                data:payload.data,\r\n            };\r\n        case FETCH_POSTS_ERROR:\r\n            return {\r\n                ...state,\r\n                request:false,\r\n                success:false,\r\n                message:payload.message\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n    \r\n}\r\nexport default postReducer;","import {combineReducers} from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\nconst reducer = combineReducers({\r\n   posts: postReducer\r\n});\r\nexport default (states,action) => reducer(states,action)\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./reducers\";\r\n\r\n\r\n\r\nconst middleware =[thunk];\r\nif(process.env.NODE_ENV !== \"production\"){\r\n    middleware.push(createLogger());\r\n}\r\nexport const store = createStore(\r\n    reducers,\r\n    applyMiddleware(...middleware)\r\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store ={store}>\n      <App/>\n    </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}